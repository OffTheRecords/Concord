// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: Messaging/chat.proto

package Messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectMessageServiceClient is the client API for DirectMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectMessageServiceClient interface {
	DirectMessageUser(ctx context.Context, in *DirectMessage, opts ...grpc.CallOption) (*DirectMessageResponse, error)
}

type directMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectMessageServiceClient(cc grpc.ClientConnInterface) DirectMessageServiceClient {
	return &directMessageServiceClient{cc}
}

func (c *directMessageServiceClient) DirectMessageUser(ctx context.Context, in *DirectMessage, opts ...grpc.CallOption) (*DirectMessageResponse, error) {
	out := new(DirectMessageResponse)
	err := c.cc.Invoke(ctx, "/Messaging.DirectMessageService/DirectMessageUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectMessageServiceServer is the server API for DirectMessageService service.
// All implementations must embed UnimplementedDirectMessageServiceServer
// for forward compatibility
type DirectMessageServiceServer interface {
	DirectMessageUser(context.Context, *DirectMessage) (*DirectMessageResponse, error)
	mustEmbedUnimplementedDirectMessageServiceServer()
}

// UnimplementedDirectMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectMessageServiceServer struct {
}

func (UnimplementedDirectMessageServiceServer) DirectMessageUser(context.Context, *DirectMessage) (*DirectMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectMessageUser not implemented")
}
func (UnimplementedDirectMessageServiceServer) mustEmbedUnimplementedDirectMessageServiceServer() {}

// UnsafeDirectMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectMessageServiceServer will
// result in compilation errors.
type UnsafeDirectMessageServiceServer interface {
	mustEmbedUnimplementedDirectMessageServiceServer()
}

func RegisterDirectMessageServiceServer(s grpc.ServiceRegistrar, srv DirectMessageServiceServer) {
	s.RegisterService(&DirectMessageService_ServiceDesc, srv)
}

func _DirectMessageService_DirectMessageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectMessageServiceServer).DirectMessageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Messaging.DirectMessageService/DirectMessageUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectMessageServiceServer).DirectMessageUser(ctx, req.(*DirectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectMessageService_ServiceDesc is the grpc.ServiceDesc for DirectMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Messaging.DirectMessageService",
	HandlerType: (*DirectMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DirectMessageUser",
			Handler:    _DirectMessageService_DirectMessageUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Messaging/chat.proto",
}
